import os
import logging
import spotipy
from spotipy.oauth2 import SpotifyOAuth
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Spotify API
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
    client_id=os.getenv("SPOTIPY_CLIENT_ID"),
    client_secret=os.getenv("SPOTIPY_CLIENT_SECRET"),
    redirect_uri="http://localhost:8888/callback",
    scope="user-read-recently-played user-top-read"
))

# –¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

async def start(update: Update, context: CallbackContext):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    keyboard = [[InlineKeyboardButton("üéß –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫", callback_data='current_track')],
                [InlineKeyboardButton("üìä –¢–æ–ø-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", callback_data='top_artists')],
                [InlineKeyboardButton("üéµ –¢–æ–ø-—Ç—Ä–µ–∫–∏", callback_data='top_tracks')],
                [InlineKeyboardButton("‚è≥ –í—Ä–µ–º—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è", callback_data='listening_time')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Spotify. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

async def current_track(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ"""
    query = update.callback_query
    await query.answer()

    track = sp.current_playback()
    if track and track["is_playing"]:
        track_name = track["item"]["name"]
        artist_name = track["item"]["artists"][0]["name"]
        link = track["item"]["external_urls"]["spotify"]
        await query.message.reply_text(f"üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: [{track_name} - {artist_name}]({link})", parse_mode="Markdown")
    else:
        await query.message.reply_text("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç.")

async def top_artists(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ø-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    query = update.callback_query
    await query.answer()

    top_artists = sp.current_user_top_artists(limit=5, time_range='medium_term')
    text = "üìä –¢–≤–æ–∏ —Ç–æ–ø-5 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:\n\n"
    for idx, artist in enumerate(top_artists["items"], start=1):
        text += f"{idx}. [{artist['name']}]({artist['external_urls']['spotify']})\n"
    
    await query.message.reply_text(text, parse_mode="Markdown")

async def top_tracks(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ø-—Ç—Ä–µ–∫–∏"""
    query = update.callback_query
    await query.answer()

    top_tracks = sp.current_user_top_tracks(limit=5, time_range='medium_term')
    text = "üéµ –¢–≤–æ–∏ —Ç–æ–ø-5 —Ç—Ä–µ–∫–æ–≤:\n\n"
    for idx, track in enumerate(top_tracks["items"], start=1):
        text += f"{idx}. [{track['name']} - {track['artists'][0]['name']}]({track['external_urls']['spotify']})\n"
    
    await query.message.reply_text(text, parse_mode="Markdown")

async def listening_time(update: Update, context: CallbackContext):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü"""
    query = update.callback_query
    await query.answer()

    recently_played = sp.current_user_recently_played(limit=50)
    total_ms = sum([item["track"]["duration_ms"] for item in recently_played["items"]])
    total_minutes = total_ms // 60000
    await query.message.reply_text(f"‚è≥ –í—Ä–µ–º—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü: {total_minutes} –º–∏–Ω—É—Ç.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("current", current_track))
    app.add_handler(CommandHandler("topartists", top_artists))
    app.add_handler(CommandHandler("toptracks", top_tracks))
    app.add_handler(CommandHandler("listeningtime", listening_time))

    app.run_polling()

if __name__ == "__main__":
    main()