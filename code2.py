import os
import logging
import spotipy
import asyncio
from spotipy.oauth2 import SpotifyOAuth
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, JobQueue

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Spotify API
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
    client_id=os.getenv("SPOTIPY_CLIENT_ID"),
    client_secret=os.getenv("SPOTIPY_CLIENT_SECRET"),
    redirect_uri=os.getenv("SPOTIPY_REDIRECT_URI"),
    scope="user-read-currently-playing user-read-recently-played user-top-read"
))

last_track_id = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞


async def check_now_playing(context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    global last_track_id
    job = context.job
    chat_id = job.chat_id  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –±–µ—Ä—ë–º ID –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏

    try:
        current_track = sp.currently_playing()

        if current_track and current_track["is_playing"]:
            track_id = current_track["item"]["id"]

            if track_id == last_track_id:
                return  # –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

            last_track_id = track_id

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
            track_name = current_track["item"]["name"]
            artist_name = ", ".join(artist["name"] for artist in current_track["item"]["artists"])
            album_name = current_track["item"]["album"]["name"]
            track_url = current_track["item"]["external_urls"]["spotify"]
            cover_url = current_track["item"]["album"]["images"][0]["url"]

            # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üéµ *–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:*\n"
                f"üéß *–¢—Ä–µ–∫:* [{track_name}]({track_url})\n"
                f"üé§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {artist_name}\n"
                f"üíø *–ê–ª—å–±–æ–º:* {album_name}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=cover_url,
                caption=message,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ñ∂ –û—Ç–∫—Ä—ã—Ç—å –≤ Spotify", url=track_url)]
                ])
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞: {e}")


async def start(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
    chat_id = update.effective_chat.id

    if not context.job_queue:
        logging.error("JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

    job_queue = context.job_queue
    existing_jobs = job_queue.get_jobs_by_name(str(chat_id))
    
    for job in existing_jobs:
        job.schedule_removal()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏

    job_queue.run_repeating(check_now_playing, interval=10, first=5, chat_id=chat_id, name=str(chat_id))

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π *Spotify-–±–æ—Ç* üéµ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Ç–≤–æ—é –º—É–∑—ã–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É! üìä\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=main_menu(), parse_mode="Markdown"
    )



def get_top_tracks():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤"""
    results = sp.current_user_top_tracks(limit=10, time_range='medium_term')
    tracks = [f"{idx+1}. *{item['name']}* - {item['artists'][0]['name']}"
              for idx, item in enumerate(results['items'])]
    return "\n".join(tracks) if tracks else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤."


def get_top_artists():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 –∞—Ä—Ç–∏—Å—Ç–æ–≤"""
    results = sp.current_user_top_artists(limit=10, time_range='medium_term')
    artists = [f"{idx+1}. *{item['name']}*" for idx, item in enumerate(results['items'])]
    return "\n".join(artists) if artists else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∞—Ä—Ç–∏—Å—Ç–æ–≤."


async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.data == "stats":
        tracks = get_top_tracks()
        artists = get_top_artists()
        text = f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Spotify:*\n\nüé∂ *–¢–æ–ø-10 —Ç—Ä–µ–∫–æ–≤:*\n{tracks}\n\nüé§ *–¢–æ–ø-10 –∞—Ä—Ç–∏—Å—Ç–æ–≤:*\n{artists}"
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=back_menu())

    elif query.data == "top_tracks":
        tracks = get_top_tracks()
        await query.edit_message_text(f"üé∂ *–¢–≤–æ–∏ —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤:*\n{tracks}", parse_mode="Markdown", reply_markup=back_menu())

    elif query.data == "top_artists":
        artists = get_top_artists()
        await query.edit_message_text(f"üé§ *–¢–≤–æ–∏ —Ç–æ–ø-10 –∞—Ä—Ç–∏—Å—Ç–æ–≤:*\n{artists}", parse_mode="Markdown", reply_markup=back_menu())

    elif query.data == "about":
        await query.edit_message_text(
            "‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n"
            "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ Spotify üéº\n"
            "üîπ –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–≤–æ–∏ —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤ üé∂\n"
            "üîπ –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–≤–æ–∏—Ö —Ç–æ–ø-10 –∞—Ä—Ç–∏—Å—Ç–æ–≤ üé§\n"
            "üîπ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ üéß\n\n",
            parse_mode="Markdown", reply_markup=back_menu()
        )

    elif query.data == "back":
        await query.message.edit_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π *Spotify-–±–æ—Ç* üéµ\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Ç–≤–æ—é –º—É–∑—ã–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É! üìä\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
            parse_mode="Markdown",
            reply_markup=main_menu()
        )


def back_menu():
    """–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]])


def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üé∂ –¢–æ–ø-10 —Ç—Ä–µ–∫–æ–≤", callback_data="top_tracks"),
         InlineKeyboardButton("üé§ –¢–æ–ø-10 –∞—Ä—Ç–∏—Å—Ç–æ–≤", callback_data="top_artists")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ])


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()


if __name__ == "__main__":
    main()
