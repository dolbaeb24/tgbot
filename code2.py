import os
import logging
import spotipy
import asyncio
import threading
import time
from multiprocessing import Process
from flask import Flask, request
from spotipy.oauth2 import SpotifyOAuth
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, JobQueue
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import MessageHandler, filters

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª—É—á—à–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_tokens = {}

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app = Flask(__name__)

@app.route("/callback")
def spotify_callback():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ—Ç Spotify"""
    auth_manager = SpotifyOAuth(
        client_id=os.getenv("SPOTIPY_CLIENT_ID"),
        client_secret=os.getenv("SPOTIPY_CLIENT_SECRET"),
        redirect_uri=os.getenv("SPOTIPY_REDIRECT_URI"),
        scope="user-read-currently-playing user-read-recently-played user-top-read"
    )
    
    code = request.args.get("code")
    chat_id = request.args.get("state")

    if code:
        token_info = auth_manager.get_access_token(code, as_dict=True)
        user_tokens[chat_id] = token_info  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        return "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram."
    
    return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."


# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    app.run(host="0.0.0.0", port=8080, debug=False, use_reloader=False) 

def refresh_spotify_token(chat_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω Spotify, –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç—ë–∫"""
    if chat_id not in user_tokens:
        return None
    
    token_info = user_tokens[chat_id]
    if token_info["expires_at"] - 60 < time.time():  # –ï—Å–ª–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ
        auth_manager = SpotifyOAuth(
            client_id=os.getenv("SPOTIPY_CLIENT_ID"),
            client_secret=os.getenv("SPOTIPY_CLIENT_SECRET"),
            redirect_uri=os.getenv("SPOTIPY_REDIRECT_URI"),
            scope="user-read-currently-playing user-read-recently-played user-top-read"
        )
        token_info = auth_manager.refresh_access_token(token_info["refresh_token"])
        user_tokens[chat_id] = token_info  # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏

    return token_info["access_token"]


async def start_auth(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Spotify"""
    chat_id = str(update.message.chat_id)
    auth_manager = SpotifyOAuth(
        client_id=os.getenv("SPOTIPY_CLIENT_ID"),
        client_secret=os.getenv("SPOTIPY_CLIENT_SECRET"),
        redirect_uri=os.getenv("SPOTIPY_REDIRECT_URI"),
        scope="user-read-currently-playing user-read-recently-played user-top-read",
        state=chat_id  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    )
    auth_url = auth_manager.get_authorize_url()
    await update.message.reply_text(f"üéµ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Spotify: [–ñ–ú–ò]({auth_url})", parse_mode="Markdown")

last_track_id = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞ –ø–æ chat_id
track_count = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–∫–æ–≤ –ø–æ chat_id
track_history = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ chat_id


async def check_now_playing(context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    global last_track_id, track_history
    job = context.job
    chat_id = job.data

    try:
        access_token = refresh_spotify_token(chat_id)
        if not access_token:
            return  

        sp = spotipy.Spotify(auth=access_token)
        current_track = sp.currently_playing()

        if current_track and current_track["is_playing"]:
            track_id = current_track["item"]["id"]

            if chat_id in last_track_id and track_id == last_track_id[chat_id]:
                return  

            last_track_id[chat_id] = track_id  

            track_name = current_track["item"]["name"]
            artist_name = ", ".join(artist["name"] for artist in current_track["item"]["artists"])
            cover_url = current_track["item"]["album"]["images"][0]["url"]
            track_url = current_track["item"]["external_urls"]["spotify"]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–∫–æ–≤
            if chat_id not in track_history:
                track_history[chat_id] = []
            track_history[chat_id].append((track_name, artist_name))

            message = (
                f"üéµ *–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:*\n"
                f"üéß *–¢—Ä–µ–∫:* [{track_name}]({track_url})\n"
                f"üé§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {artist_name}"
            )

            await context.bot.send_photo(
                chat_id=chat_id,
                photo=cover_url,
                caption=message,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ñ∂ –û—Ç–∫—Ä—ã—Ç—å –≤ Spotify", url=track_url)]
                ])
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞: {e}")


async def send_daily_report(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∑–∞ –¥–µ–Ω—å"""
    for chat_id, tracks in track_history.items():
        if not tracks:
            await context.bot.send_message(chat_id, "üìä –°–µ–≥–æ–¥–Ω—è –≤—ã –Ω–µ —Å–ª—É—à–∞–ª–∏ –º—É–∑—ã–∫—É. üéµ")
            continue

        track_count = len(tracks)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        track_list = "\n".join([f"{idx + 1}. {track} - {artist}" for idx, (track, artist) in enumerate(tracks)])

        message = (
            f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç Spotify* üéµ\n\n"
            f"üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤:* {track_count}\n\n"
            f"üé∂ *–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤:* \n{track_list}"
        )

        await context.bot.send_message(chat_id, message, parse_mode="Markdown")

    track_history.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤

async def start(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤"""
    chat_id = update.effective_chat.id
    job_queue = context.job_queue  

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    for job in job_queue.jobs():
        if job.name == str(chat_id):
            job.schedule_removal()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    job_queue.run_repeating(check_now_playing, interval=10, first=5, data=chat_id, name=str(chat_id))

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π *Spotify-–±–æ—Ç* üéµ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Ç–≤–æ—é –º—É–∑—ã–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É! üìä\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=reply_menu(), parse_mode="Markdown"
    )


async def show_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ 'üìã –ú–µ–Ω—é'"""
    await update.message.reply_text(
        "üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        parse_mode="Markdown",
        reply_markup=main_menu()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    )

def reply_menu():
    """–°–æ–∑–¥–∞–µ—Ç reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        [["üìã –ú–µ–Ω—é"]],  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É —á–∞—Ç–∞
        resize_keyboard=True, one_time_keyboard=False
    )

def get_top_tracks(chat_id):
    if chat_id not in user_tokens:
        return "‚ùå –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start_auth"
    sp = spotipy.Spotify(auth=user_tokens[chat_id]["access_token"])
    results = sp.current_user_top_tracks(limit=10, time_range='medium_term')
    tracks = [
        f"{idx+1}. *{item['name']}* - {item['artists'][0]['name']}"
        for idx, item in enumerate(results['items'])
    ]
    return "\n".join(tracks) if tracks else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤."

def get_top_artists(chat_id):
    if chat_id not in user_tokens:
        return "‚ùå –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start_auth"
    sp = spotipy.Spotify(auth=user_tokens[chat_id]["access_token"])
    results = sp.current_user_top_artists(limit=10, time_range='medium_term')
    artists = [f"{idx+1}. *{item['name']}*" for idx, item in enumerate(results['items'])]
    return "\n".join(artists) if artists else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∞—Ä—Ç–∏—Å—Ç–æ–≤."



async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id  # –î–æ–±–∞–≤–ª–µ–Ω–æ

    if query.data == "stats":
        tracks = get_top_tracks(chat_id)
        artists = get_top_artists(chat_id)
        text = f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Spotify:*\n\nüé∂ *–¢–æ–ø-10 —Ç—Ä–µ–∫–æ–≤:*\n{tracks}\n\nüé§ *–¢–æ–ø-10 –∞—Ä—Ç–∏—Å—Ç–æ–≤:*\n{artists}"
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=back_menu())

    elif query.data == "top_tracks":
        tracks = get_top_tracks(chat_id)
        await query.edit_message_text(f"üé∂ *–¢–≤–æ–∏ —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤:*\n{tracks}", parse_mode="Markdown", reply_markup=back_menu())

    elif query.data == "top_artists":
        artists = get_top_artists(chat_id)
        await query.edit_message_text(f"üé§ *–¢–≤–æ–∏ —Ç–æ–ø-10 –∞—Ä—Ç–∏—Å—Ç–æ–≤:*\n{artists}", parse_mode="Markdown", reply_markup=back_menu())
    
    elif query.data == "track_count":
        chat_id = query.message.chat.id
        tracks = track_history.get(chat_id, [])

        if not tracks:
            message = "üìä –°–µ–≥–æ–¥–Ω—è –≤—ã –µ—â—ë –Ω–µ —Å–ª—É—à–∞–ª–∏ –º—É–∑—ã–∫—É. üéµ"
        else:
            track_list = "\n".join([f"üéµ *{track}* ‚Äî {artist}" for track, artist in tracks])
            message = (
                f"üìä *–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ—Ç—á—ë—Ç Spotify* üé∂\n\n"
                f"üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤:* {len(tracks)}\n\n"
                f"üéß *–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤:*\n{track_list}"
            )

        await query.edit_message_text(message, parse_mode="Markdown", reply_markup=back_menu())

    elif query.data == "about":
        await query.edit_message_text(
            "‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n"
            "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ Spotify üéº\n"
            "üîπ –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–≤–æ–∏ —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤ üé∂\n"
            "üîπ –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–≤–æ–∏—Ö —Ç–æ–ø-10 –∞—Ä—Ç–∏—Å—Ç–æ–≤ üé§\n"
            "üîπ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ üéß\n\n",
            parse_mode="Markdown", reply_markup=back_menu()
        )

    elif query.data == "back":
        await query.message.edit_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π *Spotify-–±–æ—Ç* üéµ\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Ç–≤–æ—é –º—É–∑—ã–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É! üìä\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
            parse_mode="Markdown",
            reply_markup=main_menu()
        )


def back_menu():
    """–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]])


def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üé∂ –¢–æ–ø-10 —Ç—Ä–µ–∫–æ–≤", callback_data="top_tracks"),
         InlineKeyboardButton("üé§ –¢–æ–ø-10 –∞—Ä—Ç–∏—Å—Ç–æ–≤", callback_data="top_artists")],
        [InlineKeyboardButton("üéµ –°–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å–ª—É—à–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤", callback_data="track_count")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ])


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
    job_queue = application.job_queue  # –î–æ–±–∞–≤–ª—è–µ–º job_queue

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("start_auth", start_auth))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.Text("üìã –ú–µ–Ω—é"), show_menu))


    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

    flask_thread.terminate()  # –£–±–∏–≤–∞–µ–º Flask –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞


if __name__ == "__main__":
    main()
    while True:  # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            time.sleep(10)